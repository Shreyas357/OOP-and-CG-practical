
import java.awt.*;
import javax.swing.*;

public class CohenSutherlandClip extends JPanel {

    static final int INSIDE = 0; // 0000
    static final int LEFT = 1;   // 0001
    static final int RIGHT = 2;  // 0010
    static final int BOTTOM = 4; // 0100
    static final int TOP = 8;    // 1000

    int xMin = 100, yMin = 100, xMax = 400, yMax = 300;
    int x1 = 50, y1 = 50, x2 = 450, y2 = 350; // Line coordinates

    public void paint(Graphics g) {
        super.paint(g);
        g.setColor(Color.BLACK);
        g.drawRect(xMin, yMin, xMax - xMin, yMax - yMin); // Draw clipping rectangle

        g.setColor(Color.RED);
        g.drawLine(x1, y1, x2, y2); // Original line

        int[] clippedLine = cohenSutherlandClip(x1, y1, x2, y2);
        if (clippedLine != null) {
            g.setColor(Color.GREEN);
            g.drawLine(clippedLine[0], clippedLine[1], clippedLine[2], clippedLine[3]); // Clipped line
        }
    }

    int computeOutCode(int x, int y) {
        int code = INSIDE;
        if (x < xMin) code |= LEFT;
        else if (x > xMax) code |= RIGHT;
        if (y < yMin) code |= BOTTOM;
        else if (y > yMax) code |= TOP;
        return code;
    }

    int[] cohenSutherlandClip(int x1, int y1, int x2, int y2) {
        int outCode1 = computeOutCode(x1, y1);
        int outCode2 = computeOutCode(x2, y2);
        boolean accept = false;

        while (true) {
            if ((outCode1 | outCode2) == 0) {
                accept = true;
                break;
            } else if ((outCode1 & outCode2) != 0) {
                break;
            } else {
                int outCodeOut = (outCode1 != 0) ? outCode1 : outCode2;
                int x = 0, y = 0;

                if ((outCodeOut & TOP) != 0) {
                    x = x1 + (x2 - x1) * (yMax - y1) / (y2 - y1);
                    y = yMax;
                } else if ((outCodeOut & BOTTOM) != 0) {
                    x = x1 + (x2 - x1) * (yMin - y1) / (y2 - y1);
                    y = yMin;
                } else if ((outCodeOut & RIGHT) != 0) {
                    y = y1 + (y2 - y1) * (xMax - x1) / (x2 - x1);
                    x = xMax;
                } else if ((outCodeOut & LEFT) != 0) {
                    y = y1 + (y2 - y1) * (xMin - x1) / (x2 - x1);
                    x = xMin;
                }

                if (outCodeOut == outCode1) {
                    x1 = x;
                    y1 = y;
                    outCode1 = computeOutCode(x1, y1);
                } else {
                    x2 = x;
                    y2 = y;
                    outCode2 = computeOutCode(x2, y2);
                }
            }
        }

        if (accept) {
            return new int[]{x1, y1, x2, y2};
        } else {
            return null;
        }
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Cohen-Sutherland Line Clipping");
        CohenSutherlandClip panel = new CohenSutherlandClip();
        frame.add(panel);
        frame.setSize(600, 500);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}
